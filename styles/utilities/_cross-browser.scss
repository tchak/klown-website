//ajouter ici les mixins cross browsers



/////////////////////
//////// Flex elements 
/////////////////////


@mixin flex() {
    display: -webkit-box;      /* OLD - iOS 6-, Safari 3.1-6 */
    display: -moz-box;         /* OLD - Firefox 19- (buggy but mostly works) */
    display: -ms-flexbox;      /* TWEENER - IE 10 */
    display: -webkit-flex;     /* NEW - Chrome */
    display: flex;             /* NEW, Spec - Opera 12.1, Firefox 20+ */
}

@mixin flex-order($value) {
    -webkit-box-ordinal-group: $value;   /* OLD - iOS 6-, Safari 3.1-6 */
    -moz-box-ordinal-group: $value;      /* OLD - Firefox 19- */
    -ms-flex-order: $value;              /* TWEENER - IE 10 */
    -webkit-order: $value;               /* NEW - Chrome */
    order: $value;                       /* NEW, Spec - Opera 12.1, Firefox 20+ */
}

@mixin flex-grow($value) {
    -webkit-flex-grow: $value;   /* Safari  */
    flex-grow: $value;
    -ms-flex-positive: $value;
}

@mixin flex-direction($value: row) {
	@if $value == row-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: horizontal;
	} @else if $value == column {
		-webkit-box-direction: normal;
		-webkit-box-orient: vertical;
	} @else if $value == column-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: vertical;
	} @else {
		-webkit-box-direction: normal;
		-webkit-box-orient: horizontal;
	}
	-webkit-flex-direction: $value;
	-moz-flex-direction: $value;
	-ms-flex-direction: $value;
	flex-direction: $value;
}

@mixin flex-wrap($value: nowrap) {
  // No Webkit/FF Box fallback.
  -webkit-flex-wrap: $value;
  @if $value == nowrap {
    -ms-flex-wrap: none;
  } @else {
    -ms-flex-wrap: $value;
  }
  flex-wrap: $value;
}

@mixin justify-content($value: flex-start) {
    @if $value == flex-start {
      -webkit-box-pack: start;
      -moz-box-pack: start;
      -ms-flex-pack: start;
    } @else if $value == flex-end {
      -webkit-box-pack: end;
      -moz-box-pack: end;
      -ms-flex-pack: end;
    } @else if $value == space-between {
      -webkit-box-pack: justify;
      -moz-box-pack: justify;
      -ms-flex-pack: justify;
    } @else if $value == space-around {
      -ms-flex-pack: distribute;
    } @else {
      -webkit-box-pack: $value;
      -moz-box-pack: $value;
      -ms-flex-pack: $value;
    }
    -webkit-justify-content: $value;
    justify-content: $value;
}



@mixin align-items($value: stretch) {
    @if $value == flex-start {
      -webkit-box-align: start;
      -moz-box-align: start;
      -ms-flex-align: start;
    } @else if $value == flex-end {
      -webkit-box-align: end;
      -moz-box-align: end;
      -ms-flex-align: end;
    } @else {
      -webkit-box-align: $value;
      -moz-box-align: $value;
      -ms-flex-align: $value;
    }
    -webkit-align-items: $value;
    align-items: $value;
  }


  @mixin align-self($value: auto) {
    // No Webkit Box Fallback.
    -webkit-align-self: $value;
    @if $value == flex-start {
      -ms-flex-item-align: start;
    } @else if $value == flex-end {
      -ms-flex-item-align: end;
    } @else {
      -ms-flex-item-align: $value;
    }
    align-self: $value;
  }


  @mixin align-content($value: stretch) {
    // No Webkit Box Fallback.
    -webkit-align-content: $value;
    @if $value == flex-start {
      -ms-flex-line-pack: start;
    } @else if $value == flex-end {
      -ms-flex-line-pack: end;
    } @else {
      -ms-flex-line-pack: $value;
    }
    align-content: $value;
  }


@mixin column-count($value: 3){

    -webkit-column-count: $value;
    -moz-column-count: $value; 
    column-count: $value;
    li{ display: inline-block; width: inherit;}
}

@mixin column-gap($value: $unite){
  -webkit-column-gap: $value;
  -moz-column-gap: $value; 
   column-gap: $value;
}

@mixin column-width($value){
  -webkit-column-width: $value;
  -moz-column-width: $value; 
   column-width: $value;
}
//

@mixin flex-grid-items($cols) {
  @include flex;
  @include flex-wrap(wrap);
  @include flex-direction(row);

  > * {
    $item-width: math.div(100%, $cols);
    width: $item-width;
    box-sizing: border-box;
    padding: 0 $unite;
  }
}

//
// Grid
//
@mixin grid($col, $row, $gap: $baseline math.div($unite, 2), $justify: null, $align: null){
  display:-ms-grid;
  display: grid;
  -ms-grid-columns: $col;
  -ms-template-rows: $row;
  -ms-grid-gap: $gap;
  grid-template-columns: $col;
  grid-template-rows: $row;
  grid-gap: $gap;
  @if($justify){
    justify-content: $justify;
  }
  @if($align){
    align-items: $align;
  }
}

/* mixin for multiline */
@mixin multiline-text-overflow($lineHeight: 1.2em, $lineCount: 1, $bgColor: white){
  overflow: hidden;
  position: relative;
  line-height: $lineHeight;
  height: $lineHeight * $lineCount; 
  margin-right: -1em;
  padding-right: 1em;
  &:before {
    content: '...';
    position: absolute;
    right: 0;
    bottom: $baseline;
  }
  &:after {
    content: '';
    position: absolute;
    right: 0;
    width: 1em;
    height: 1em;
    margin-top: 0.2em;
    background: $bgColor;
  }
}
